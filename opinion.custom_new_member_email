diff --git a/tendenci/apps/memberships/management/commands/send_membership_notices.py b/tendenci/apps/memberships/management/commands/send_membership_notices.py
index 8f8eefe65..d03f5c096 100644
--- a/tendenci/apps/memberships/management/commands/send_membership_notices.py
+++ b/tendenci/apps/memberships/management/commands/send_membership_notices.py
@@ -243,9 +243,23 @@ class Command(BaseCommand):
                 payment_method_name = membership.payment_method.human_name
             else:
                 payment_method_name = ''
-
+            # Copied from memberships/models.py
+            # Should probably just call Notice.get_default_context(membership)
+            inv = membership.get_invoice()
+            if inv:
+                invoice_link = inv.get_absolute_url()
+            else:
+                invoice_link = ''
             context.update({
+                'first_name': membership.user.first_name,
+                'last_name': membership.user.last_name,
+                'email': membership.user.email,
+                'username': membership.user.username,
                 'member_number': membership.member_number,
+                'membership_type': membership.membership_type.name,
+                'membership_price': membership.get_price(),
+                'donation_amount': inv.get_donation_amount(),
+                'total_amount': inv.total,
                 'payment_method': payment_method_name,
                 'referer_url': '%s%s?next=%s' % (site_url, reverse('auth_login'), membership.referer_url),
                 'membership_link': '%s%s' % (site_url, membership.get_absolute_url()),
@@ -256,6 +270,14 @@ class Command(BaseCommand):
                 'renewlink': '%s%s' % (site_url, membership.get_absolute_url())
             })
 
+            context.update({ 'membership_total': MembershipDefault.objects.filter(status=True, status_detail='active').count() })
+            if membership.join_dt:
+                context.update({ 'join_dt': time.strftime("%B %d, %Y %I:%M %p", membership.join_dt.timetuple()) })
+            if membership.renew_dt:
+                context.update({ 'renew_dt': time.strftime("%B %d, %Y %I:%M %p", membership.renew_dt.timetuple()) })
+            if membership.expire_dt:
+                context.update({ 'expire_dt': time.strftime("%B %d, %Y %I:%M %p", membership.expire_dt.timetuple()) })
+
             body = fieldify(body)
 
             body = body + ' <br /><br />{% include "email_footer.html" %}'
diff --git a/tendenci/apps/memberships/models.py b/tendenci/apps/memberships/models.py
index 127bbb261..d0a6d1b08 100644
--- a/tendenci/apps/memberships/models.py
+++ b/tendenci/apps/memberships/models.py
@@ -2,6 +2,7 @@ import os
 import hashlib
 import uuid
 import time
+import re
 from copy import deepcopy
 from functools import partial
 from datetime import datetime, timedelta
@@ -94,6 +95,8 @@ FIELD_MAX_LENGTH = 2000
 
 VALID_MEMBERSHIP_STATUS_DETAIL = ['active', 'pending', 'expired', 'archive', 'disapproved']
 
+ARRAY_STRING_SPLIT_REGEX = re.compile(r"['\"], u['\"]")
+
 
 class MembershipType(OrderingBaseModel, TendenciBaseModel):
     PRICE_FORMAT = u'%s - %s'
@@ -1813,8 +1816,11 @@ class MembershipDefault(TendenciBaseModel):
 
             for name, value in items.iteritems():
                 if hasattr(value, 'all'):
-                    items[name] = ', '.join([item.__unicode__() \
-                                             for item in value.all()])
+                    items[name] = [item.__unicode__() for item in value.all()]
+                elif value == '[]':
+                    items[name] = []
+                elif hasattr(value, 'startswith') and value.startswith('[u') and value.endswith(']'):
+                    items[name] = ARRAY_STRING_SPLIT_REGEX.split(value[3:-2])
 
         return items
 
@@ -2052,10 +2058,12 @@ class Notice(models.Model):
     )
 
     STATUS_DETAIL_ACTIVE = 'active'
+    STATUS_DETAIL_CUSTOM = 'custom'
     STATUS_DETAIL_HOLD = 'admin_hold'
 
     STATUS_DETAIL_CHOICES = (
         (STATUS_DETAIL_ACTIVE, 'Active'),
+        (STATUS_DETAIL_CUSTOM, 'CCA Custom'),
         (STATUS_DETAIL_HOLD, 'Admin Hold')
     )
 
@@ -2165,6 +2173,14 @@ class Notice(models.Model):
             'corporate_membership_notice': corporate_msg,
         })
 
+        context.update({ 'membership_total': MembershipDefault.objects.filter(status=True, status_detail='active').count() })
+        if membership.join_dt:
+            context.update({ 'join_dt': time.strftime("%B %d, %Y %I:%M %p", membership.join_dt.timetuple()) })
+        if membership.renew_dt:
+            context.update({ 'renew_dt': time.strftime("%B %d, %Y %I:%M %p", membership.renew_dt.timetuple()) })
+        if membership.expire_dt:
+            context.update({ 'expire_dt': time.strftime("%B %d, %Y %I:%M %p", membership.expire_dt.timetuple()) })
+
         return context
 
     def get_subject(self, membership=None):
@@ -2295,7 +2311,8 @@ class Notice(models.Model):
         # send email to admins
         membership_recipients = get_notice_recipients('module', 'memberships', 'membershiprecipients')
         admin_recipients = get_notice_recipients('site', 'global', 'allnoticerecipients')
-        recipients = list(set(membership_recipients + admin_recipients))
+        #recipients = list(set(membership_recipients + admin_recipients))
+        recipients = admin_recipients
 
         if recipients:
             notification.send_emails(
@@ -2306,6 +2323,25 @@ class Notice(models.Model):
                 'membership_total': MembershipDefault.objects.filter(status=True, status_detail='active').count(),
             })
 
+        # custom email to membership recipients
+        emails = membership_recipients
+        field_dict['status_detail'] = 'custom'
+        for notice in Notice.objects.filter(**field_dict):
+            notice_requirments = (
+                notice.membership_type == membership_type,
+                not notice.membership_type
+            )
+            if any(notice_requirments):
+                notification.send_emails(
+                    emails,
+                    'membership_%s_to_member' % template_type, {
+                    'subject': notice.get_subject(membership=membership),
+                    'content': notice.get_content(membership=membership),
+                    'reply_to': notice.sender,
+                    'sender': get_setting('site', 'global', 'siteemailnoreplyaddress'),
+                    'sender_display': notice.sender_display,
+                })
+
         return True
 
     @models.permalink
