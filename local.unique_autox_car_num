# Require 'Car #' field on AutoX Registrations to be unique per Event
diff --git a/tendenci/apps/events/forms.py b/tendenci/apps/events/forms.py
index 5584e7858..cccaafcbb 100644
--- a/tendenci/apps/events/forms.py
+++ b/tendenci/apps/events/forms.py
@@ -483,6 +483,39 @@ class FormForCustomRegForm(forms.ModelForm):
                 raise forms.ValidationError(_('Free pass not available for "%s".' % corp_membership.corp_profile.name))
         return use_free_pass
 
+    # Get AutoX 'Car #' with leading zeros.
+    # When clean_field_52() is called, the field value has already been validated as an integer,
+    # converted to a Python int (which drops leading zeros), and saved as
+    # self.cleaned_data['field_52'].  This function retrieves the original string and sanitizes it
+    # to allow leading zeros to be preserved.
+    re_car_num = re.compile(r'\.\d*|[^0-9]')
+    def get_autox_car_num(self):
+        widget = self.fields['field_52'].widget
+        car_num = widget.value_from_datadict(self.data, self.files, self.add_prefix('field_52'))
+        car_num = self.re_car_num.sub('', str(car_num))
+        return car_num
+
+    # AutoX 'Car #' must be unique per Event and should preserve leading zeros.
+    # This is not perfect; If multiple registrations are submitted at the same time, we could
+    # theoretically end up with duplicate values (if both submissions check for duplicates before
+    # they both save).  However, the likelihood of that is very low, and that wouldn't be a terribly
+    # big deal.
+    def clean_field_52(self):
+        if not self.event:
+            raise forms.ValidationError(_('Server error while validating Car #.'))
+        car_num = self.get_autox_car_num()
+        if self.car_numbers.count(car_num) > 1:
+            raise forms.ValidationError(_('Each driver must use a unique Car #.'))
+        if CustomRegFieldEntry.objects.exclude(entry=self.entry).filter(
+            field_id=52,
+            entry__registrants__registration__event=self.event,
+            entry__registrants__cancel_dt=None,
+            value=car_num,
+        ).exists():
+            raise forms.ValidationError(_('This Car # is already taken.'))
+        return car_num
+
+
     def save(self, event, **kwargs):
         """
         Create a FormEntry instance and related FieldEntry instances for each
diff --git a/tendenci/apps/events/views.py b/tendenci/apps/events/views.py
index 672ad7291..005b61762 100644
--- a/tendenci/apps/events/views.py
+++ b/tendenci/apps/events/views.py
@@ -1631,6 +1631,18 @@ def member_register(request, event_id,
     })
 
 
+def collect_autox_car_numbers(formset):
+    # Collect AutoX 'Car #' fields from all forms so we can enforce uniqueness across forms.
+    car_numbers = []
+    for form in formset.forms:
+        if 'field_52' in form.fields:
+            car_num = form.get_autox_car_num()
+            car_numbers.append(car_num)
+    if car_numbers:
+        for form in formset.forms:
+            form.car_numbers = car_numbers
+
+
 @is_enabled('events')
 def register(request, event_id=0,
              individual=False,
@@ -1859,6 +1871,8 @@ def register(request, event_id=0,
             #if not request.user.profile.is_superuser:
             within_available_spots = event.limit==0 or event.spots_available >= int(total_regt_forms)
 
+            collect_autox_car_numbers(registrant)
+
             if all([within_available_spots,
                     reg_form.is_valid(),
                     registrant.is_valid(),
@@ -1959,6 +1973,7 @@ def register(request, event_id=0,
                         flat_registrants.append(form)
 
         elif 'addmore' in request.POST:
+            collect_autox_car_numbers(registrant)
             add_more_registrants = True
 
     # if not free event, store price in the list for each registrant
@@ -2240,6 +2255,9 @@ def multi_register(request, event_id=0, template_name="events/reg8n/multi_regist
 
     if request.method == 'POST':
         if 'submit' in request.POST:
+
+            collect_autox_car_numbers(registrant)
+
             if False not in (reg_form.is_valid(), registrant.is_valid(), addon_formset.is_valid()):
 
                 # override event_price to price specified by admin
@@ -2446,6 +2464,9 @@ def registration_edit(request, reg8n_id=0, hash='', template_name="events/reg8n/
                     form.fields[key].required = False
 
     if request.method == 'POST':
+
+        collect_autox_car_numbers(formset)
+
         if formset.is_valid():
             updated = False
             if custom_reg_form:
