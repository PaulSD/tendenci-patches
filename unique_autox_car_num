# Require 'Car #' field on AutoX Registrations to be unique per Event
diff --git a/tendenci/apps/events/forms.py b/tendenci/apps/events/forms.py
index 0bbccba..165dee6 100644
--- a/tendenci/apps/events/forms.py
+++ b/tendenci/apps/events/forms.py
@@ -483,6 +483,27 @@ class FormForCustomRegForm(forms.ModelForm):
         return use_free_pass
 
 
+    # AutoX 'Car #' must be unique per Event.
+    # This is not perfect; If multiple registrations are submitted at the same time, we could
+    # theoretically end up with duplicate values (if both submissions check for duplicates before
+    # they both save).  However, the likelihood of that is very low, and that wouldn't be a terribly
+    # big deal.
+    def clean_field_52(self):
+        if not self.event:
+            raise forms.ValidationError(_('Server error while validating Car #.'))
+        car_num = self.cleaned_data['field_52']
+        if self.field_52_values.count(car_num) > 1:
+            raise forms.ValidationError(_('Each driver must use a unique Car #.'))
+        if CustomRegFieldEntry.objects.exclude(entry=self.entry).filter(
+            field_id=52,
+            entry__registrants__registration__event=self.event,
+            entry__registrants__cancel_dt=None,
+            value=car_num,
+        ).exists():
+            raise forms.ValidationError(_('This Car # is already taken.'))
+        return car_num
+
+
     def save(self, event, **kwargs):
         """
         Create a FormEntry instance and related FieldEntry instances for each
diff --git a/tendenci/apps/events/views.py b/tendenci/apps/events/views.py
index c662943..1d501f1 100644
--- a/tendenci/apps/events/views.py
+++ b/tendenci/apps/events/views.py
@@ -1641,6 +1641,24 @@ def member_register(request, event_id,
     }, context_instance=RequestContext(request))
 
 
+def collect_autox_car_numbers(formset):
+    # Collect AutoX 'Car #' fields from all forms so we can enforce uniqueness across forms.
+    field_52_values = []
+    for form in formset.forms:
+        for name, field in form.fields.items():
+            if name != "field_52":
+                continue
+            value = field.widget.value_from_datadict(form.data, form.files, form.add_prefix(name))
+            try:
+                value = int(value)
+                field_52_values.append(value)
+            except ValueError:
+                pass
+    if field_52_values:
+        for form in formset.forms:
+            form.field_52_values = field_52_values
+
+
 @is_enabled('events')
 def register(request, event_id=0,
              individual=False,
@@ -1877,6 +1895,8 @@ def register(request, event_id=0,
             #if not request.user.profile.is_superuser:
             within_available_spots = event.limit==0 or event.spots_available >= int(total_regt_forms)
 
+            collect_autox_car_numbers(formset)
+
             if all([within_available_spots,
                     reg_form.is_valid(),
                     registrant.is_valid(),
@@ -2262,6 +2282,9 @@ def multi_register(request, event_id=0, template_name="events/reg8n/multi_regist
 
     if request.method == 'POST':
         if 'submit' in request.POST:
+
+            collect_autox_car_numbers(formset)
+
             if False not in (reg_form.is_valid(), registrant.is_valid(), addon_formset.is_valid()):
 
                 # override event_price to price specified by admin
@@ -2469,6 +2492,9 @@ def registration_edit(request, reg8n_id=0, hash='', template_name="events/reg8n/
 
 
     if request.method == 'POST':
+
+        collect_autox_car_numbers(formset)
+
         if formset.is_valid():
             updated = False
             if custom_reg_form:
